/*!
 * \file      smtc_hal_spi.c
 *
 * \brief     SPI Hardware Abstraction Layer implementation
 *
 * The Clear BSD License
 * Copyright Semtech Corporation 2021. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted (subject to the limitations in the disclaimer
 * below) provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Semtech corporation nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
 * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
 * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * -----------------------------------------------------------------------------
 * --- DEPENDENCIES ------------------------------------------------------------
 */

#include <stdint.h>   // C99 types
#include <stdbool.h>  // bool type


#include "em_gpio.h"
#include "smtc_hal.h"
#include "smtc_hal_gpio.h"
#include "modem_pinout.h"
#include "spidrv.h"



/*
 * -----------------------------------------------------------------------------
 * --- PRIVATE MACROS-----------------------------------------------------------
 */

/*
 * -----------------------------------------------------------------------------
 * --- PRIVATE CONSTANTS -------------------------------------------------------
 */

/*
 * -----------------------------------------------------------------------------
 * --- PRIVATE TYPES -----------------------------------------------------------
 */


/*!
 *  @brief SPI structure
 */

/*
 * -----------------------------------------------------------------------------
 * --- PRIVATE VARIABLES -------------------------------------------------------
 */

SPIDRV_HandleData_t handleData;
SPIDRV_Handle_t handle = &handleData;


/*
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DECLARATION -------------------------------------------
 */

/*
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */


void hal_spi_init( const uint32_t id, const hal_gpio_pin_names_t mosi, const hal_gpio_pin_names_t miso,
                   const hal_gpio_pin_names_t sclk )
{
  SPIDRV_Init_t initData = SPIDRV_MASTER_EUSART0;
  if(id == 0){
      initData.port = HAL_USART0;
  }
  else if(id == 1){
      initData.port = HAL_USART1;
  }
  else if(id == 2){
      initData.port = HAL_USART2;
  }
  initData.csControl = spidrvCsControlApplication;

  initData.portTx = hal_get_gpio_port(mosi);
  initData.pinTx = hal_get_gpio_pin_num(mosi);
  initData.portRx = hal_get_gpio_port(miso);
  initData.pinRx = hal_get_gpio_pin_num(miso);
  initData.portClk = hal_get_gpio_port(sclk);
  initData.pinClk = hal_get_gpio_pin_num(sclk);
  initData.portCs = 0;
  initData.pinCs = 0;


  // Initialize an SPI driver instance.
  SPIDRV_Init(handle, &initData);
}

void hal_spi_deinit( const uint32_t id )
{
  SPIDRV_DeInit(handle);
}

uint16_t hal_spi_in_out( const uint32_t id, const uint16_t out_data )
{
  uint16_t rxValue;

  SPIDRV_MTransferSingleItemB (handle, out_data, &rxValue);
  return rxValue;
}



/* --- EOF ------------------------------------------------------------------ */
